@page "/Agenda"
@model gestion_de_tareas.Pages.AgendaModel
@{
    ViewData["Title"] = "Agenda";
}

<h2 class="text-center">Tablero de Tareas</h2>
<form method="post">
    @Html.AntiForgeryToken()
</form>

<!-- Buscador de tareas por estado -->
<div class="container mb-3">
    <label for="taskFilter">Filtrar por estado:</label>
    <select id="taskFilter" class="form-control" onchange="filterTasks()">
        <option value="all">Todas</option>
        <option value="Por hacer">Por hacer</option>
        <option value="En progreso">En progreso</option>
        <option value="Completado">Completado</option>
    </select>
</div>

<div class="container">
    <div class="row">
        @foreach (var estado in new[] { "Por hacer", "En progreso", "Completado" })
        {
            <div class="col-md-4">
                <h4>@estado</h4>
                <div id="@(estado == "Por hacer" ? "todo" : estado == "En progreso" ? "inProgress" : "done")" class="task-column">
                    @foreach (var tarea in Model.Tareas.Where(t => t.Estado == estado))
                    {
                        <div class="task-card task-item" data-id="@tarea.Id" data-estado="@tarea.Estado" ondblclick="editTask(@tarea.Id)">
                            <h5>@tarea.Titulo</h5>
                            <p>Fecha: @tarea.Fecha.ToShortDateString()</p>
                            <p>Hora: @tarea.HoraInicio.ToString(@"hh\:mm")</p>
                            <p>@tarea.Descripcion</p>

                            <!-- Botón de eliminar -->
                            <form method="post" asp-page-handler="Eliminar" asp-route-id="@tarea.Id" style="display:inline;">
                                <button type="submit" class="btn btn-danger" onclick="return confirm('¿Estás seguro de que deseas eliminar esta tarea?');">Eliminar</button>
                            </form>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let columns = ["todo", "inProgress", "done"];

            columns.forEach(id => {
                new Sortable(document.getElementById(id), {
                    group: "tasks",
                    animation: 150,
                    onEnd: function (evt) {
                        let taskId = evt.item.dataset.id;  // Usa dataset en vez de getAttribute
                        let newStatus = mapColumnToStatus(evt.to.id);

                        console.log("Moviendo tarea ID:", taskId, "Nuevo estado:", newStatus);

                        if (taskId) { // Solo llama a fetch si hay un ID válido
                            updateTaskStatus(taskId, newStatus);
                        } else {
                            console.error("Error: No se pudo obtener el ID de la tarea.");
                        }
                    }
                });
            });
        });

        function mapColumnToStatus(columnId) {
            switch (columnId) {
                case "todo": return "Por hacer";
                case "inProgress": return "En progreso";
                case "done": return "Completado"; // Corregido error de capitalización
                default: return "Por hacer";
            }
        }

        function updateTaskStatus(taskId, newStatus) {
            if (!taskId) {
                console.error(" Error: ID de tarea no válido, no se enviará la actualización.");
                return;
            }

            // Obtener el token anti-forgery del formulario oculto
            let tokenInput = document.querySelector("input[name='__RequestVerificationToken']");
            let token = tokenInput ? tokenInput.value : null;

            if (!token) {
                console.error(" No se encontró el token de seguridad.");
                return;
            }

            let payload = { id: parseInt(taskId), estado: newStatus };
            console.log("Enviando a backend:", payload);

            fetch("/Agenda?handler=ActualizarEstado", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": token  //  Enviamos el token
                },
                body: JSON.stringify(payload)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(` Error en la respuesta: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log("Estado actualizado correctamente:", data);
                        document.querySelector(`[data-id='${taskId}']`).setAttribute("data-estado", newStatus); // Actualiza el `data-estado`
                    } else {
                        console.error(" Error en la actualización:", data);
                    }
                })
                .catch(error => console.error("Error en la petición:", error));
        }


        function editTask(taskId) {
            window.location.href = `/EditarTarea/${taskId}`;
        }

        function filterTasks() {
            let selectedState = document.getElementById("taskFilter").value;
            let tasks = document.querySelectorAll(".task-item");

            tasks.forEach(task => {
                let taskState = task.getAttribute("data-estado").trim();
                task.style.display = (selectedState === "all" || taskState === selectedState) ? "flex" : "none";
            });
        }
    </script>
}

<style>
    .task-column {
        background: #f4f4f4;
        min-height: 300px;
        padding: 10px;
        border-radius: 8px;
    }

    .task-card {
        background: white;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        cursor: grab;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }

        .task-card:hover {
            background: #f0f0f0;
        }
</style>



    
